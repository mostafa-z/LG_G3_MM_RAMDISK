cat << CTAG
{
	name:ADV,
		elements:[
			`[ -d "/sys/module/pm_8x60" ] && PM=/sys/module/pm_8x60;
			[ -d "/sys/module/msm_pm" ] && PM=/sys/module/msm_pm;
			
			if [ -d "$PM/modes/cpu0" ]; then
				$BB echo '{ SPane:{
					title:"Krait C-States Settings"
				}},'
				if [ -f "$PM/modes/cpu0/wfi/idle_enabled" ]; then
				C0=\`$BB cat $PM/modes/cpu0/wfi/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Shallowest Sleep with instant wake up.",
						label:"C0 (WFI)",
						default:'$C0',
						action:"socset '$PM'/modes/cpu0/wfi/idle_enabled wfi"
					}},'
				fi
				if [ -f "$PM/modes/cpu0/retention/idle_enabled" ]; then
				C1=\`$BB cat $PM/modes/cpu0/retention/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Slightly deeper sleep with slight latency when waking up. (Disable this if you encounter screen flickering)",
						label:"C1 (Retention)",
						default:'$C1',
						action:"socset '$PM'/modes/cpu0/retention/idle_enabled retention"
					}},'
				fi
				if [ -f "$PM/modes/cpu0/standalone_power_collapse/idle_enabled" ]; then
				C2=\`$BB cat $PM/modes/cpu0/standalone_power_collapse/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Deeper sleep with longer latency when waking up.",
						label:"C2 (Stand Alone Power Collapse)",
						default:'$C2',
						action:"socset '$PM'/modes/cpu0/standalone_power_collapse/idle_enabled standalone_power_collapse"
					}},'
				fi
				if [ -f "$PM/modes/cpu0/power_collapse/idle_enabled" ]; then
				C3=\`$BB cat $PM/modes/cpu0/power_collapse/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Really deep sleep with longest latency when waking up.",
						label:"C3 (Power Collapse)",
						default:'$C3',
						action:"socset '$PM'/modes/cpu0/power_collapse/idle_enabled power_collapse"
					}},'
				fi
			fi`
			`if [ -f "/sys/kernel/mm/ksm/run" ]; then
			KSM=\`$BB cat /sys/kernel/mm/ksm/run\`
			PTS=\`$BB cat /sys/kernel/mm/ksm/pages_to_scan\`
			SLEEP=\`$BB cat /sys/kernel/mm/ksm/sleep_millisecs\`
				$BB echo '{ SPane:{
					title:"Kernel Samepage Merging"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"KSM lets the hypervisor system share identical memory pages amongst different processes or virtualized guests. This increases CPU consumption but improves memory.",
						default:'$KSM',
						action:"generic /sys/kernel/mm/ksm/run"
					}},'
					if [ -f "/sys/kernel/mm/ksm/deferred_timer" ]; then
					DT=\`$BB cat /sys/kernel/mm/ksm/deferred_timer\`
						$BB echo '{ SCheckBox:{
							label:"Deferred Timer",
							description:"If enabled, KSM thread will not wakeup CPU to carryout activities thus gaining battery while compromising slightly on memory that could have been saved.",
							default:'$DT',
							action:"generic /sys/kernel/mm/ksm/deferred_timer"
						}},'
					fi
					$BB echo '{ SSeekBar:{
						title:"Pages To Scan",
						unit:" pages",
						step:4,
						min:4,
						max:1024,
						default:'$PTS',
						action:"generic /sys/kernel/mm/ksm/pages_to_scan"
					}},
					{ SSeekBar:{
						title:"Scan Delay Interval",
						unit:" ms",
						step:50,
						min:50,
						max:3000,
						default:'$SLEEP',
						action:"generic /sys/kernel/mm/ksm/sleep_millisecs"
					}},'
			fi`
			`if [ -f "/sys/kernel/mm/uksm/run" ]; then
			UKSM=\`$BB cat /sys/kernel/mm/uksm/run\`
			SLEEP=\`$BB cat /sys/kernel/mm/uksm/sleep_millisecs\`
			UKSMGOV=\`$BB echo $($UKM/actions/bracket-option /sys/kernel/mm/uksm/cpu_governor)\`
			MAXCPU=\`$BB cat /sys/kernel/mm/uksm/max_cpu_percentage\`
				$BB echo '{ SPane:{
					title:"Ultra Kernel Samepage Merging"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"UKSM lets the hypervisor system share identical memory pages amongst different processes or virtualized guests. UKSM has a better algorithm than KSM.",
						default:'$UKSM',
						action:"generic /sys/kernel/mm/uksm/run"
					}},
					{ SSeekBar:{
						title:"Sleep",
						description:"How long will the daemon sleep before it wakes up and starts scanning memory pages.",
						unit:" ms",
						step:100,
						min:0,
						max:3000,
						default:'$SLEEP',
						action:"generic /sys/kernel/mm/uksm/sleep_millisecs"
					}},
					{ SOptionList:{
						title:"CPU Governor",
						description:"Controls how aggressively the daemon uses CPU power. This sets a preset for the maximum CPU consumption below.",
						default:'$UKSMGOV',
						action:"bracket-option /sys/kernel/mm/uksm/cpu_governor",
						values:['
							for UGOV in \`$BB cat /sys/kernel/mm/uksm/cpu_governor | $BB sed -e "s/\]//;s/\[//"\`; do
								$BB echo "\"$UGOV\",";
							done;
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, APPLY ],
								to:"generic /sys/kernel/mm/uksm/max_cpu_percentage"
							},
						]
					}},
					{ SSeekBar:{
						title:"Max CPU Consumption",
						description:"The maximum CPU consumption the daemon will use while scanning. Higher = better scanning (more battery drain).",
						unit:"%",
						step:1,
						min:10,
						max:99,
						default:'$MAXCPU',
						action:"generic /sys/kernel/mm/uksm/max_cpu_percentage"
					}},'
			fi`
			`if [ -f "/sys/kernel/sched/gentle_fair_sleepers" ]; then
			GFS=\`$BB cat /sys/kernel/sched/gentle_fair_sleepers\`
			
				$BB echo '{ SPane:{
					title:"Gentle Fair Sleepers"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"Sleeper Fairness is a concept used by CFS which treat sleeping/waiting tasks as if they were in a run queue. This implies tasks which spend most of the time waiting for an user input and such will get a fair share of CPU when they need it. Disabling Gentle Fair Sleepers could improve UI responsiveness.",
						default:'$GFS',
						action:"generic /sys/kernel/sched/gentle_fair_sleepers"
					}},'
			fi`
			`if [ -f "/sys/module/lowmemorykiller/parameters/minfree" ]; then
				$BB echo '{ SPane:{
					title:"Manual Low Memory Killer",
					description:"LMK Minfree controls how much memory each app type can hold, and is responsible for memory management for multitasking."
				}},
					{ SOptionList:{
						title:"LMK Profile",
						description:"This option will auto-tune LMK minfree values as per selected profile.",
						default:Custom,
						action:"lmk profile",
						values:[ Custom, Low, Medium, Default, Aggressive, Exterminate,
						],
						notify:[
								{
									on:APPLY,
									do:[ REFRESH, APPLY ],
									to:[ 
											"lmk 1",
											"lmk 2",
											"lmk 3",
											"lmk 4",
											"lmk 5",
											"lmk 6"
									],
								}
						]
					}},'
					for LMK in 1 2 3 4 5 6; do
						$BB echo '{ SSeekBar:{ '
							case $LMK in
								1)
									$BB echo 'title:"Foreground App", description:"The application currenty on the screen and running."' ;;
								2)
									$BB echo 'title:"Visible App", description:"The application that is open and running in background."' ;;
								3)
									$BB echo 'title:"Secondary Server", description:"This is a service an application needs that is alive and ready."' ;;
								4)
									$BB echo 'title:"Hidden App", description:"An idle process that wakes up on application request."' ;;
								5)
									$BB echo 'title:"Content Provider", description:"Apps that provide data (content) to the system."' ;;
								6)
									$BB echo 'title:"Empty App", description:"Apps closed by the user but ready to run."' ;;
							esac
						$BB echo ', action:"lmk '${LMK}'",
						unit:"MB", min:1, max:300 }},'
					done
			fi`
			`if [ -f "/sys/module/lowmemorykiller/parameters/enable_adaptive_lmk" ] && [ -f "/sys/module/lowmemorykiller/parameters/vmpressure_file_min" ]; then
				AUTO=\`$BB cat /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk\`
				VMP=\`$BB cat /sys/module/lowmemorykiller/parameters/vmpressure_file_min\`
					$BB echo '{ SCheckBox:{
						label:"Adaptive LMK",
						description:"The basic idea here is to make LMK more aggressive dynamically when such a thrashing scenario is detected. To detect thrashing, this patch uses vmpressure events. The values of vmpressure upon which an action has to be taken, was derived empirically.",
						default:'$AUTO',
						action:"generic /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk"
					}},
					{ SSeekBar:{
						title:"VMPressure file min",
						description:"This parameter controls the behaviour of LMK when vmpressure is in the range of 90-94. Adaptive lmk triggers based on number file pages wrt vmpressure_file_min, when vmpressure is in the range of 90-94. Usually this is a pseudo minfree value, higher than the highest configured value in minfree array.",
						unit:" pages",
						step:1,
						min:0,
						max:100,
						default:'$VMP',
						action:"generic /sys/module/lowmemorykiller/parameters/vmpressure_file_min"
					}},'
			fi`
		]
}
CTAG
